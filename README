This repository holds experimental work on synthesizing ADTs using Coq
8.4pl2.  Files are compiled using the included Makefile.

Attempt 6:
 - Combine implementations into a single ADT.v, use [Comp] rather than
   having a separate spec and implementations

Attempt 5:
 - Reorganize files to split up componets
  * Common.v - common tactics and definitions and lemmas
  * ADT.v - definition of an ADT using [Comp]
  * PartialADT.v - definition of an ADT which might be missing some implementations
  * ADTExamples.v - a few examples of program refinement
  * ComputationExamples.v - a few examples of program refinement not using ADTs

The attempts below refer to files in commit
1a189325e0522abd0f43e2d309eb9d1d75c2970a and before.

Attempt 4:
 - ComputationalADT.v
   * Attempt at including [Comp] type into ADTs

Attempt 3:
 - SAT.v
   * Attempt at implementing a SAT solver and some refinement using a
     monadic functional language

Attempt 2:
 - InternalADT.v
   * implements ADT combinators based on ADTs using arbitrary indexing
     types
   * uses sums of units in practice
   * contains aborted automation attempt from an earlier version of
     the file at the bottom

Attempt 1:
 - ADT.v
   * implements ADT combinators based on ADTs using [string]s as the
     indexing type for methods
 - ListADT.v
   * aborted attempt to use lists rather than strings as the indexing
     type for methods

Attempt 0:
 - combinators.v
   * implements very basic ADT combinators based on higher order
     functions
